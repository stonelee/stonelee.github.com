<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: csharp | Stonelee's Blog]]></title>
  <link href="http://stonelee.info/blog/categories/csharp/atom.xml" rel="self"/>
  <link href="http://stonelee.info/"/>
  <updated>2013-01-05T09:11:00+08:00</updated>
  <id>http://stonelee.info/</id>
  <author>
    <name><![CDATA[stonelee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LINQ流水线]]></title>
    <link href="http://stonelee.info/blog/2011/07/27/linq-example/"/>
    <updated>2011-07-27T00:00:00+08:00</updated>
    <id>http://stonelee.info/blog/2011/07/27/linq-example</id>
    <content type="html"><![CDATA[<p>linq帅呆了~这一刻函数编程附身</p>

<p>```c#
//处理废票文本框中用户的输入
private List<int> getDirtyNumList(int startNum, int endNum, string txtDirtyNums)
{</p>

<pre><code>return txtDirtyNums.Trim(new char[] { ' ', ',', '，' })//去掉头尾的空格或者逗号
                    .Split(new char[] { ',', '，' })//将字符串分割为数组
                    .Where(key =&gt; Regex.IsMatch(key, @"^\d+{1}quot;))//数字
                    .Select(key =&gt; Convert.ToInt32(key))//转格式
                    .Where(key =&gt; key &gt;= startNum &amp;&amp; key &lt;= endNum)//必须在范围内
                    .OrderBy(key =&gt; key)//排序
                    .Distinct()//去重复
                    .ToList();
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DotNetBar中ComboTree显示整条路径信息]]></title>
    <link href="http://stonelee.info/blog/2011/07/22/dotnetbar-combotree-show-path/"/>
    <updated>2011-07-22T00:00:00+08:00</updated>
    <id>http://stonelee.info/blog/2011/07/22/dotnetbar-combotree-show-path</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>ComboTree是个可以显示树状下拉菜单的ComboBox控件，弹出菜单如下所示：</p>

<p>```
Tree</p>

<pre><code> — node
 — node
</code></pre>

<p>```</p>

<p>点击节点node，默认显示结果为node，即仅仅是节点信息。
现在需求是要显示Tree node，即返回整条路径信息。</p>

<h2>思路</h2>

<p>看上去很简单的样子，在选择事件中得到该节点的父路径信息，然后设置ComboTree的Text值即可。
嗯嗯！我擦！Text没用！！</p>

<h2>换个思路</h2>

<p>更改显示节点，即SelectedNode的Text，这下行了。ComboBox显示成功，但问题是原来节点的信息也被更改了，导致树变得很难看。没办法，在弹出菜单出现时再改回去，弹出菜单出现时改回来吧！真是个丑陋的做法！</p>

<p><img src="/images/blog/combobox.gif" alt="" /></p>

<h2>无代码无真相</h2>

<p>主要是用Tag来存储内部信息，没什么技术含量~</p>

<p>```c#
//显示整个路径信息<br/>
private void showFullText()<br/>
{</p>

<pre><code>string strPaths = "";  
comboTreeDate.SelectedNode.FullPath.Split(';').ToList().ForEach(s =&gt; strPaths += s);  
Node thisNode = comboTreeDate.SelectedNode;  
//存储原值  
comboTreeDate.Tag = thisNode;  
thisNode.Tag = thisNode.Text;  
//更改text  
thisNode.Text = strPaths;  
</code></pre>

<p>}</p>

<p>private void comboTreeDate_PopupShowing(object sender, EventArgs e)<br/>
{</p>

<pre><code>//改回原值  
Node thisNode= comboTreeDate.Tag as Node;  
if (thisNode!=null)  
    thisNode.Text = thisNode.Tag.ToString();  
</code></pre>

<p>}</p>

<p>private void comboTreeDate_PopupClose(object sender, EventArgs e)<br/>
{</p>

<pre><code>showFullText();  
</code></pre>

<p>}<br/>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[连续票号剔除算法]]></title>
    <link href="http://stonelee.info/blog/2011/07/14/continue-bill-number-reject/"/>
    <updated>2011-07-14T00:00:00+08:00</updated>
    <id>http://stonelee.info/blog/2011/07/14/continue-bill-number-reject</id>
    <content type="html"><![CDATA[<h2>问题场景</h2>

<p>现有票据0-999，单位A领取前100张（0-99），单位B领取之后100张(100-199),单位C也领取100张(400-499),求剩下的票号段</p>

<p><code>
原来： 0-999
领取： 0-99 100-199 400-499
===========运算求解======================
剩余： 200-399 500-999
</code></p>

<h2>分析</h2>

<p>如果单纯分析这个问题，此时票据只有1000张，数量很少，因此只需要将每个票号放到一个set中，然后进行简单的集合运算即可求出结果。</p>

<p>但是现实系统中票据量往往很大(9位票据就是近10亿条记录)，每张票据一条记录进行存储是不现实的，因此需要进行分段存储，即将一次领取的几本票据（票号连续）作为一条记录，只记录起始票号和终止票号，运算时因为内存空间有限，也不能整体集合求解，需要另辟蹊径。</p>

<p>既然是边界条件判断，如果用各种if应该可以解决问题，但是这样太繁琐，非常容易出错。今天早上忽然想到，这个问题中票号是连续的，因此只要找到前后几个关键点，整段票号就能确定，而段内的票号是不重要的。</p>

<h2>算法</h2>

<p>1.找到全部关键点</p>

<p>原来的号：0 999</p>

<p>每段领取号各向外扩展一个号，作为可能的关键点：
-1 100 99 200 399 500</p>

<p>2.将上两种关键点放到一个数组中，去重复排序，得到：
-1 0 99 100 200 399 500 999</p>

<p>3.去掉领取号中重复的点，剩余：
-1 200 399 500 999</p>

<p>4.只取原来范围内的点，剩余
200 399 500 999</p>

<p>5.两两一组，即为所求解
(200,399),(500,999)</p>

<h2>c#技巧</h2>

<ul>
<li>HashSet可以去重复，也可使用Distinct</li>
<li>引入Linq后，数组可以进行集合运算。交集Intersect，差集Except，联集Union</li>
<li>数组只能存储相同类型的数据</li>
<li>二维数组和交错数组是不同的，二维数组形如int[,],GetLength(0)可获得第0维长度，依次类推</li>
<li>需要筛选操作的话，使用交错数组string[][]，而不要使用多维数组int[,]</li>
</ul>


<h2>无码无真相</h2>

<p>```c#
//从父表票号段中剔除子表中的票号段<br/>
public static int[,] getLeftNums(int[,] fathers, int[,] sons)<br/>
{</p>

<pre><code>//填入所有可能的关键点  
//HashSet可去重复  
HashSet&lt;int&gt; possibleSets = new HashSet&lt;int&gt;();  
foreach (int i in fathers)  
    possibleSets.Add(i);  
for (int i = 0; i &lt; sons.GetLength(0); i++)  
{  
    possibleSets.Add(sons[i, 0] - 1);  
    possibleSets.Add(sons[i, 1] + 1);  
}  

//去掉sons中已经使用过的点  
HashSet&lt;int&gt; sonSets = new HashSet&lt;int&gt;();  
foreach (int i in sons)  
    sonSets.Add(i);  
IEnumerable&lt;int&gt; withoutSonsSets = possibleSets.Except(sonSets);  

//只取fathers范围内的点  
HashSet&lt;int&gt; inFatherSets = new HashSet&lt;int&gt;();  
foreach (int value in withoutSonsSets)  
{  
    for (int i = 0; i &lt; fathers.GetLength(0); i++)  
    {  
        if (value &gt;= fathers[i, 0] &amp;&amp; value &lt;= fathers[i, 1])  
        {  
            inFatherSets.Add(value);  
            break;  
        }  
    }  
}  

//排序  
List&lt;int&gt; sortedLists = inFatherSets.OrderBy(i =&gt; i).ToList&lt;int&gt;();  

//两两一组  
int[,] results = new int[sortedLists.Count() / 2, 2];  
for (int i = 0; i &lt; sortedLists.Count(); i++)  
{  
    int index = i / 2;  
    if (i % 2 == 0)  
        results[index, 0] = sortedLists[i];  
    else  
        results[index, 1] = sortedLists[i];  
}  
return results;  
</code></pre>

<p>}<br/>
```</p>

<h2>测试用例</h2>

<p>```c#
[Test]<br/>
public void getLeftNum2()<br/>
{</p>

<pre><code>int[,] fathers = new int[1, 2] { { 0, 999 } };  
int[,] sons = new int[3, 2] { { 0, 99 }, { 100, 199 }, { 400, 499 } };  
int[,] results = frmQueryBillDistribute.getLeftNums(fathers, sons);  

int[,] asserts = new int[2, 2] { { 200, 399 }, { 500, 999 }};  
Assert.AreEqual(results, asserts);  
</code></pre>

<p>}<br/>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LINQ技巧小结]]></title>
    <link href="http://stonelee.info/blog/2011/06/27/linq-trick/"/>
    <updated>2011-06-27T00:00:00+08:00</updated>
    <id>http://stonelee.info/blog/2011/06/27/linq-trick</id>
    <content type="html"><![CDATA[<p>LINQ可不是简单的SQL语句的替代品，它将繁琐的数据操作（排序、求和、分组、投影、打包）统一起来，极大地简化了代码。</p>

<h2>查询所有以ABC开头的字符串</h2>

<p><code>c#
string[] xx={"ABCEFG","ABCASDFASDF","12312ADSFASD"};  
xx.Where(x=&gt;x.StartsWith("ABC")).ToList()
  .ForEach(x=&gt;Console.WriteLine(x));  
</code></p>

<p>使用正则来解决</p>

<p><code>c#
string[] xx = { "ABCEFG", "abcASDFASDF", "12312ADSFASD" };  
xx.Where(s =&gt; Regex.IsMatch(s, "^abc",RegexOptions.IgnoreCase))
  .ToList().ForEach(s =&gt;Console.WriteLine(s));  
</code></p>

<h2>简化字符</h2>

<p><code>
string source = @"西瓜,1,a
苹果,2,b
橙子,3,c";
结果数组：西瓜,苹果,橙子
</code></p>

<p>```c#
string[] array1 = source.Split(new char[] { '/r', '/n' })</p>

<pre><code>              .Select(x =&gt; x.Split(',')[0]).ToArray();  
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LINQ方式实现学生成绩汇总（右连接、聚合函数）]]></title>
    <link href="http://stonelee.info/blog/2011/06/27/linq-score-collect/"/>
    <updated>2011-06-27T00:00:00+08:00</updated>
    <id>http://stonelee.info/blog/2011/06/27/linq-score-collect</id>
    <content type="html"><![CDATA[<h2>需求</h2>

<p>从数据表students中取得所有学生姓名，然后将其scores表对应中的分数相加，显示一个“姓名：分数”的列表</p>

<ul>
<li>取得所有姓名（包括没有成绩的）</li>
<li>分数是该学生所有成绩的总和</li>
</ul>


<p>先看效果图：</p>

<p><img src="/images/blog/score.gif" alt="" /></p>

<p>数据库结构简化模拟如下：</p>

<p>```c#
class Student<br/>
{</p>

<pre><code>public int id { get; set; }  
public string name { get; set; }  
</code></pre>

<p>}<br/>
class Score<br/>
{</p>

<pre><code>public int StudentId { get; set; }  
public int score { get; set; }  
</code></pre>

<p>}<br/>
```</p>

<p>插入测试数据：</p>

<p><code>c#
Student p1 = new Student() { id = 1, name = "张三" };  
Student p2 = new Student() { id = 2, name = "李四" };  
Student p3 = new Student() { id = 3, name = "王五" };  
Score s1 = new Score() { StudentId = 1, score = 80 };  
Score s2 = new Score() { StudentId = 1, score = 90 };  
Score s3 = new Score() { StudentId = 2, score = 70 };  
List&lt;Student&gt; students = new List&lt;Student&gt;(new Student[] { p1, p2, p3 });  
List&lt;Score&gt; scores = new List&lt;Score&gt;(new Score[] { s1, s2, s3 });  
</code></p>

<p>查询，注意：</p>

<ul>
<li>LINQ中没有left join和right join之分，只有关键词join来控制连接，join之前表的作为完整的表连接，join之后的表需要使用DefaultIfEmpty来进行处理，才能正常的显示null值</li>
<li>group中的key是分组的字段，分组后就可以使用聚合函数了</li>
<li>LINQ就像生产流水线，可以分阶段进行数据排序、汇总、投影等操作，最后组装起来就能达到预定的效果</li>
</ul>


<p>```c#
//left join,返回左边每一个元素<br/>
var studentsTable = from student in students</p>

<pre><code>                join score in scores on student.id equals score.StudentId into joinedTable  
                from j in joinedTable.DefaultIfEmpty()//处理右边为空的情况  
                select new  
                {  
                    name = student.name,  
                    score = j != null ? j.score : 0  
                };  
</code></pre>

<p>//聚合函数<br/>
var data = from student in studentsTable</p>

<pre><code>       group student by student.name into g  
       select new  
       {  
           name = g.Key,  
           score = g.Sum(student =&gt; student.score)  
       };  
</code></pre>

<p>foreach (var d in data)<br/>
{</p>

<pre><code>Console.WriteLine("name:" + d.name + ";score:" + d.score.ToString());  
</code></pre>

<p>}<br/>
Console.ReadLine();<br/>
```</p>

<p>看看效果：</p>

<p>```c#
foreach (var d in data)<br/>
{</p>

<pre><code>Console.WriteLine("name:" + d.name + ";score:" + d.score.ToString());  
</code></pre>

<p>}<br/>
Console.ReadLine();<br/>
```</p>
]]></content>
  </entry>
  
</feed>
