<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Stonelee's Blog]]></title>
  <link href="http://stonelee.info/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://stonelee.info/"/>
  <updated>2013-06-03T11:49:50+08:00</updated>
  <id>http://stonelee.info/</id>
  <author>
    <name><![CDATA[stonelee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Underscore源码研究之多种编程范式实现]]></title>
    <link href="http://stonelee.info/blog/2013/03/18/underscore-style/"/>
    <updated>2013-03-18T00:00:00+08:00</updated>
    <id>http://stonelee.info/blog/2013/03/18/underscore-style</id>
    <content type="html"><![CDATA[<p>Underscore提供了函数(functional)和对象(object-oriented)两种编程范式，使得其API调用既灵活又直观，可以说是整个类库架构中最为精华之处。</p>

<h3>两种调用方式</h3>

<p>函数式</p>

<p><code>
_.map([1, 2, 3], function(n){ return n * 2; });
</code></p>

<p>对象式</p>

<p><code>
_([1, 2, 3]).map(function(n){ return n * 2; });
</code></p>

<h3>源码分析</h3>

<p>调用入口</p>

<p><code>
var _ = function(obj) {
  //如果参数为_对象，说明已经实例化过了，所以直接返回
  if (obj instanceof _) return obj;
  //如果实例化时没有使用new，那么在这里包装一下，使得this指向该实例
  if (!(this instanceof _)) return new _(obj);
  //将obj保存在内部属性_wrapped中
  this._wrapped = obj;
};
</code></p>

<p>具体功能实现没什么好说的，直接定义为_的方法，因此可以进行函数式调用。
需要注意的是第一个参数为obj，在对象式调用时会省掉。</p>

<p>```
_.map = function(obj, iterator, context) {
  var results = [];
  if (obj == null) return results;
  if (nativeMap &amp;&amp; obj.map === nativeMap) return obj.map(iterator, context);
  each(obj, function(value, index, list) {</p>

<pre><code>results[results.length] = iterator.call(context, value, index, list);
</code></pre>

<p>  });
  return results;
};
```</p>

<p>重头戏来了。将方法附加到_的prototype上，实现对象式调用</p>

<p>```
//此方法暴露出来，供自定义扩展使用
<em>.mixin = function(obj) {
  each(</em>.functions(obj), function(name){</p>

<pre><code>//定义为_的方法，供函数式调用
var func = _[name] = obj[name];
//定义到prototype上，供对象式调用
_.prototype[name] = function() {
  //将实例化时传递给构造函数的对象作为第一个参数
  var args = [this._wrapped];
  push.apply(args, arguments);
  //判断是否要链式调用，见下文分析
  return result.call(this, func.apply(_, args));
};
</code></pre>

<p>  });
};
//将之前定义到<em>上的方法附加到</em>的prototype上，实现对象式调用
<em>.mixin(</em>);
```</p>

<h3>链式调用</h3>

<p>两种编程范式都可以实现链式调用，与普通调用的区别是需要使用chain来声明，最后使用value来取得最终结果。</p>

<p>函数式</p>

<p><code>
_.chain([1, 2, 3]).map(function(n) {
  return n * 2;
}).reduce(function(memo, n) {
  return memo + n;
}).value();
</code></p>

<p>对象式</p>

<p><code>
_([1, 2, 3]).chain().map(function(n) {
  return n * 2;
}).reduce(function(memo, n) {
  return memo + n;
}).value();
</code></p>

<h3>链式调用实现</h3>

<p>```
//判断是否要链式调用
var result = function(obj) {
  return this.<em>chain ? </em>(obj).chain() : obj;
};</p>

<p>//函数式链式调用
<em>.chain = function(obj) {
  return </em>(obj).chain();
};</p>

<p><em>.extend(</em>.prototype, {</p>

<p>  // 标记为链式调用，这样返回值就为this而不是计算得到的结果
  chain: function() {</p>

<pre><code>this._chain = true;
return this;
</code></pre>

<p>  },</p>

<p>  // 取得最终的结果
  value: function() {</p>

<pre><code>return this._wrapped;
</code></pre>

<p>  }</p>

<p>});
```</p>

<h3>链式调用的调试</h3>

<p>链式调用非常方便，但是要调试中间步骤的结果比较困难，因此提供了tap方法</p>

<p><code>
_([1, 2, 3]).chain().map(function(n) {
  return n * 2;
}).tap(function(obj) {
  console.log(obj);
}).reduce(function(memo, n) {
  return memo + n;
}).value();
</code></p>

<h3>源码实现</h3>

<p>将中间过程的obj作为回调函数的参数进行处理，最终依然将其返回</p>

<p><code>
_.tap = function(obj, interceptor) {
  interceptor(obj);
  return obj;
};
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[构建基于spm的前端开发流水线]]></title>
    <link href="http://stonelee.info/blog/2012/10/09/spm-build/"/>
    <updated>2012-10-09T00:00:00+08:00</updated>
    <id>http://stonelee.info/blog/2012/10/09/spm-build</id>
    <content type="html"><![CDATA[<p><a href="http://seajs.org">seajs</a> 是由支付宝玉伯开源的一个浏览器端的js模块加载库，最近的项目中一直在使用，确实是解决js代码组织的利器。</p>

<p>seajs解决的是模块书写和加载问题，而另一个开源项目<a href="https://github.com/seajs/spm">spm</a>则解决了模块打包和部署的流程问题。</p>

<p>这几天抽时间看了下，感觉还不错，对我们自己的前端开发流水线构建有很大启发，记录试验过程如下。</p>

<h3>服务器私有源配置</h3>

<p>nginx中配置私有源路径为/modules</p>

<p><code>
location /modules {
  alias       "/home/vboxadmin/lxd/dev/static";
  autoindex   on;
}
</code></p>

<p>创建私有源目录</p>

<p><code>
mkdir -p dev/static/
</code></p>

<p>在目录中配置config.json</p>

<p>```
{¬
  "servers": {¬</p>

<pre><code>"dev": {¬
  "user": "vboxadmin",¬
  "pass": "vboxadmin"¬
}¬
</code></pre>

<p>  },¬
  "deploy": {¬</p>

<pre><code>"server": "dev",¬
"host": "10.10.22.86",¬
"path": "/home/vboxadmin/lxd/dev/static/"¬
</code></pre>

<p>  }¬
}¬
```</p>

<p>这个配置提供给scp使用，从而可以使用spm deploy来部署远程服务器。
deploy中的server在servers中配置，从中配置登录远程服务器的用户名和密码。
host为远程ip或者域名，path为远程目的路径。</p>

<h3>本地配置</h3>

<p>创建私有模块开发目录</p>

<p><code>
mkdir my-module
</code></p>

<p>目录中放置所有私有模块共同的配置config.json</p>

<p>```
{</p>

<pre><code>"sources": ["10.10.22.86:8090/modules"]
</code></pre>

<p>}
```</p>

<p>sources为远程私有源访问路径</p>

<p>创建私有模块，例如kjquery</p>

<p><code>
mkdir kjquery
cd kjquery
spm init
</code></p>

<p>自动创建的package.json需要进行修改
加入 "parent": "../config.json",</p>

<h3>组件开发</h3>

<p>配置完成，在私有模块中进行组件开发。</p>

<p><code>``
|-- examples
|  </code>-- index.md
|-- src
|   <code>-- kjquery.js
</code>-- tests</p>

<pre><code>|-- runner.html
`-- kjquery-spec.js
</code></pre>

<p>```</p>

<ul>
<li>src中放置组件源码</li>
<li>tests中对组件进行测试，这里直接调用src中的代码</li>
<li>examples中对组件调用方式给出使用例子，调用的是dist中的代码</li>
</ul>


<p>开发完成后</p>

<ul>
<li>$ spm build 会在当前目录的dist下生成打包后的文件</li>
<li>$ spm upload 版本稳定后发布到本地库，默认为~/.spm，按照我司的情况，估计会将这个目录作为hg版本库</li>
<li>$ spm deploy 部署到远程服务器</li>
</ul>


<h3>业务开发</h3>

<p>调用 <a href="http://aralejs.org/">共用组件</a> 和私有组件，进行业务系统开发</p>

<p>通过config.map进行映射，从而切换开发和生产环境</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[当前端遇到Adblock Plus]]></title>
    <link href="http://stonelee.info/blog/2012/09/19/adblock-plus-bug/"/>
    <updated>2012-09-19T00:00:00+08:00</updated>
    <id>http://stonelee.info/blog/2012/09/19/adblock-plus-bug</id>
    <content type="html"><![CDATA[<p>今天将最近开发的演示程序集成到同事的业务框架中去，结果在同事的浏览器中报错：</p>

<p><img src="/images/blog/adblock-bug.png" alt="" /></p>

<p>Firebug中显示报错，但是没有具体错误提示，只显示问题所在代码</p>

<p><code>
r.open('GET', url, true)
</code></p>

<p>点进去看发现其上下文只是一般的ajax调用而已，why？</p>

<h2>排错</h2>

<h3>浏览器问题？</h3>

<p>最初怀疑跟浏览器有关,我测试使用的是chrome和firefox14，而同事使用firefox15.
于是在测试服务器上安装firefox15，木有报错...</p>

<h3>调用库代码问题？</h3>

<p>报错的代码属于seajs，google搜索关键字无果，更新到最新版本还是没效果</p>

<h3>冷静思考</h3>

<p>一共有5个tpl模板文件需要加载，此处加载了4个，出问题的为track.tpl.
于是怀疑模板文件是否格式有问题，难道有未闭合的html标签？
反复对照查看发现没有问题...</p>

<p>索性将调用改为其他模板，这下不再报错了，虽然模板渲染还是有问题。</p>

<p>难道是文件编码问题？隐藏字符？还是文件内容有瑕疵？</p>

<p>猛然想到，同事使用firefox多年，而测试服务器是新安装的纯净版，难道是插件造成的问题?</p>

<h2>原因</h2>

<p>Firefox插件Adblock Plus的过滤列表ChinaList+EasyList中
有规则：</p>

<p><code>
|http://*/track.
</code></p>

<p>导致模板文件track.tpl被屏蔽，从而ajax加载该文件失败</p>

<p>因此解决方案是将该文件改名为tracks.tpl</p>

<p>苦逼前端，除了应付各种浏览器兼容问题，尼玛还要应付浏览器插件兼容!!!
摔！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrap modal源码分析]]></title>
    <link href="http://stonelee.info/blog/2012/08/22/bootstrap-modal/"/>
    <updated>2012-08-22T00:00:00+08:00</updated>
    <id>http://stonelee.info/blog/2012/08/22/bootstrap-modal</id>
    <content type="html"><![CDATA[<p>要分析的代码见:
<a href="https://github.com/twitter/bootstrap/blob/master/js/bootstrap-modal.js">bootstrap-modal</a></p>

<h2>整体结构</h2>

<p>用匿名函数将代码整个包裹起来，防止全局变量污染。</p>

<p><code>
!function ($) {}(window.jQuery);
</code></p>

<p>但是传递的参数为window.jQuery，这个在使用seajs封装时有点小问题，为了迁就它，不得已只好将jQuery暴露出来。</p>

<h3>类定义</h3>

<p>提供插件的基本逻辑</p>

<p>```
//定义对象
var Modal = function (element, options) {}</p>

<p>//在prototype中定义对象方法
Modal.prototype = {</p>

<pre><code>//constructor重新设置原型链，使得Modal.prototype.constructor === Modal，而不是Object
constructor: Modal
</code></pre>

<p>  , show: function () {}
  , hide: function (e) {}
}
```</p>

<h3>jQuery插件定义</h3>

<p>```
$.fn.modal = function (option) {
  //return使得方法可以进行链式调用。
  return this.each(function () {</p>

<pre><code>var $this = $(this)
  , data = $this.data('modal')
  , options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == 'object' &amp;&amp; option)
//将内部使用对象存放到data('modal')中，可以轻松从外部获取
if (!data) $this.data('modal', (data = new Modal(this, options)))
if (typeof option == 'string') data[option]()
else if (options.show) data.show()
</code></pre>

<p>  })
}</p>

<p>//使得插件默认配置项可以在插件代码外重新设置。
$.fn.modal.defaults = {</p>

<pre><code>backdrop: true
</code></pre>

<p>  , keyboard: true
  , show: true
}</p>

<p>//代码外面可以通过$.fn.modal.Constructor来获得Modal
$.fn.modal.Constructor = Modal
```</p>

<h3>Data-api</h3>

<p>在页面标签中设置data-toggle就可以提供modal调用，为页面编写者提供了最大的便利。</p>

<p>```
$(function () {
  $('body').on('click.modal.data-api', '[data-toggle="modal"]', function ( e ) {</p>

<pre><code>var $this = $(this)
  , href = $this.attr('href')
  , $target = $($this.attr('data-target') || (href &amp;&amp; href.replace(/.*(?=#[^\s]+$)/, ''))) //strip for ie7
  , option = $target.data('modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) &amp;&amp; href }, $target.data(), $this.data())

e.preventDefault()

$target
  .modal(option)
  .one('hide', function () {
    $this.focus()
  })
</code></pre>

<p>  })
})
```</p>

<h2>技术难点</h2>

<p>```
var Modal = function (element, options) {
  this.options = options
  this.$element = $(element)</p>

<pre><code>.delegate('[data-dismiss="modal"]', 'click.dismiss.modal', $.proxy(this.hide, this))
</code></pre>

<p>  this.options.remote &amp;&amp; this.$element.find('.modal-body').load(this.options.remote)
}
```</p>

<p>上面这段代码中，</p>

<p>this指向的是Modal类的对象，通过new Modal()生成。
this.options和this.$element是该对象的属性。
this.hide存在于Modal的原型链上，作为该对象的方法被调用。</p>

<p>$.proxy(this.hide, this)使得hide中的this指向这个代码中的this，即modal对象。
如果直接在delegate中调用this.hide，会导致hide中的this指向delegate的目标对象，也就是[data-dismiss="modal"]这个页面组件，通常是个按钮。</p>

<h2>结尾</h2>

<p>不得不佩服Twitter员工的水平，代码结构相当优雅清晰，有许多设计细节值得借鉴。</p>

<p>弄清了整体结构和技术难点，其他部分作为实现细节就简单了，对照着代码看下就好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ExtJS 4 mvc架构演化]]></title>
    <link href="http://stonelee.info/blog/2012/04/26/new-extjs-mvc/"/>
    <updated>2012-04-26T00:00:00+08:00</updated>
    <id>http://stonelee.info/blog/2012/04/26/new-extjs-mvc</id>
    <content type="html"><![CDATA[<p>从年前技术选型开始算起，使用Extjs 4已经四五个月时间了。对比之前的3.x版本，Extjs 4给了我们太多的惊喜：全新的mvc架构、强大的class体系、灵活的js加载方式、纯div布局页面。因此，项目组毫不犹豫地选择其作为前端架构进行新项目的开发。</p>

<p>项目初始时，我们一直遵循推荐的MVC架构：在view中配置页面控件，controller中编写业务逻辑。但随着项目的推进，模块代码越来越多，加之由于种种原因开发时间严重缩短，没有时间进行代码评审，controller中的代码灵活性过强，调用页面控件方式相对繁琐等问题逐渐暴露出来，页面基本无法复用，controller一片狼藉。</p>

<h2>第一次重构</h2>

<p>在用户桌面widget开发时，发现新widget与原模块中的view很像，但是在store,pagingtoolbar等方面略有差别，而controller中的逻辑非常杂乱，一个文件包含了整个模块的业务逻辑，维护和复用都相当困难。</p>

<p>重构结果总结如下:</p>

<ul>
<li>将controller中的业务逻辑尽量移到view中，采用js闭包实现逻辑的相对隔离，跨多view的逻辑依然放在controller中，达到维护容易和代码复用的目的。</li>
<li>采用extend的方式简化view开发</li>
<li>操作按钮尽量使用inline方式，便于用户使用，也有利于集成到其他view中。</li>
<li>add和edit两个界面合为一个，简化开发和维护工作量</li>
<li>store.sync后回传的数据可能与grid中的column不符，这时无法享用自动load的好处，因此应该使用model来save。grid同时使用pagingtoolbar时必须用model来save，然后load，否则pagingtoolbar不能更新。</li>
</ul>


<h2>第二次重构</h2>

<p>业务逻辑移到view中，满足了页面间高内聚、低耦合的设计要求，但是view之间相对独立的特点导致了无法实现逻辑代码复用的问题。</p>

<p>经研究，可以使用mixin来实现逻辑的复用。</p>

<p>例如Grid可以拆分为Columns（基本列）,Crud（增删改）,Operate（操作）,filter（筛选）等minin类,这几个类都包含了控件和业务逻辑,可以灵活配置在各个view中。</p>

<p><img src="/images/blog/Extjs-New-MVC.png" alt="" /></p>
]]></content>
  </entry>
  
</feed>
